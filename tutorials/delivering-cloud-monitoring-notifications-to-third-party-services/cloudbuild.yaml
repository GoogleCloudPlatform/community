# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This is the Cloud Build build configuration file. It builds and submits the
# Docker image to Container Registry, and also applies Terraform configurations
# for the gcloud project based on the current GitHub branch.
# For more information about Cloud Build, you can find the documentation here:
# https://cloud.google.com/cloud-build/docs
# For more information about Terraform, you can find the documentation here:
# https://www.terraform.io/docs/index.html
#
# If Cloud Build is run from a git branch named either "dev" or "prod", 
# the configuration will be applied to the cloud project provided via
# environment variable $PROJECT_ID. Otherwise, the changes will be planned,
# but not applied (dry run mode, which is useful when testing config changes
# from a development branch).
#
# For dev and prod branches, the following steps are executed:
# 1. terraform init
# 2. terraform refresh
# 3. terraform plan
# 4. terraform apply
#
# For any other branch, the following steps are executed:
# 1. terraform init for all environments subfolders
# 2. terraform refresh for all environments subfolders
# 3. terraform plan for all environment subfolders
#
# This is to ensure that changes being proposed hold for every single environment.
# 
# To test a build on dev manually:
# 1. Make sure you are using the correct glcoud project for your dev environment
#    (replace DEV_PROJECT_ID with your dev gcloud project id):
#    gcloud config set project DEV_PROJECT_ID
# 2. Build and deploy the project
#    cd ~/cloud-monitoring-notification-delivery-integration-sample-code
#    gcloud builds submit . --config cloudbuild.yaml --substitutions BRANCH_NAME=dev
#
# To test a build on prod manually:
# 1. Make sure you are using the correct glcoud project for your prod environment:
#    (replace PROD_PROJECT_ID with your prod gcloud project id):
#    gcloud config set project PROD_PROJECT_ID
# 2. Build and deploy the project
#    cd ~/cloud-monitoring-notification-delivery-integration-sample-code
#    gcloud builds submit . --config cloudbuild.yaml --substitutions BRANCH_NAME=prod

steps:
- id: 'build docker image'

  # Uses the docker build step to build an image
  name: 'gcr.io/cloud-builders/docker'
  args: ['build', '--build-arg', 'PROJECT_ID=$PROJECT_ID', '--tag', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}', './jira_integration_example']
  timeout: 300s # 5 minutes

- id: 'check for required environment variables'
  name: 'bash'
  args: 
  - '-c'
  - | 
      # check if project id is set
      if [ -z "$PROJECT_ID" ]; then
        echo "***********************"
        echo "Missing required environment variable project_id."
        echo "Set the project id by running 'gcloud config set project PROJECT_ID',"
        echo "where PROJECT_ID is the Google Cloud Project ID that you want to deploy to."
        echo "Then, rerun Cloud Build."
        echo "***********************"
      fi

- id: 'check branch'
  name: 'bash'
  args: 
  - '-c'
  - | 
      # check current branch
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "prod" ]; then
        echo "***********************"
        echo "Applying terraform configs from git branch $BRANCH_NAME"
        echo "to google cloud monitoring project $PROJECT_ID"
        echo "***********************"  
      else
        echo "***********************"
        echo "[dry run mode] Planning terraform configs from git branch $BRANCH_NAME"
        echo "to google cloud monitoring project $PROJECT_ID."
        echo "To apply the configs, rerun this command from git branch 'dev' or 'prod'."
        echo "***********************"  
      fi

- id: 'tf init'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      # terraform initialization for dev or prod environments
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "prod" ]; then
        cd environments/$BRANCH_NAME
        echo ""
        echo "*************** TERRAFORM INIT ******************"
        echo "******* At environment: $BRANCH_NAME ********"
        echo "*************************************************"
        terraform init -backend-config "bucket=$PROJECT_ID-tfstate"
      # terraform initialization for all environments
      else
        echo "***********************"
        echo "initializing terraform for all environments"
        echo "***********************"
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM INIT ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform init -backend-config "bucket=$PROJECT_ID-tfstate" || exit 1
          cd ../../
        done
      fi 
  timeout: 300s # 5 minutes

- id: 'tf refresh'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - |
      # refresh terraform state for dev or prod environments
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "prod" ]; then
        cd environments/$BRANCH_NAME
        echo ""
        echo "*************** TERRAFORM REFRESH ******************"
        echo "******* At environment: $BRANCH_NAME ********"
        echo "*************************************************"
        terraform refresh -var="project=$PROJECT_ID"
      # refresh terraform state for all environments
      else
        echo "***********************"
        echo "refreshing terraform for all environments"
        echo "***********************"
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}
          echo ""
          echo "*************** TERRAFORM REFRESH ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform refresh -var="project=$PROJECT_ID" || exit 1
          cd ../../
        done
      fi 
  timeout: 300s # 5 minutes

- id: 'tf plan'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      # plan terraform changes for dev or prod environments
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "prod" ]; then
        cd environments/$BRANCH_NAME
        echo ""
        echo "*************** TERRAFORM PLAN ******************"
        echo "******* At environment: $BRANCH_NAME ********"
        echo "*************************************************"
        terraform plan -var="project=$PROJECT_ID"
      # plan terraform changes for all environments
      else
        echo "***********************"
        echo "planning terraform for all environments"
        echo "***********************"
        for dir in environments/*/
        do 
          cd ${dir}   
          env=${dir%*/}
          env=${env#*/}  
          echo ""
          echo "*************** TERRAFOM PLAN ******************"
          echo "******* At environment: ${env} ********"
          echo "*************************************************"
          terraform plan -var="project=$PROJECT_ID" || exit 1
          cd ../../
        done
      fi 
  timeout: 300s # 5 minutes

- id: 'tf apply'
  name: 'hashicorp/terraform:0.12.28'
  entrypoint: 'sh'
  args: 
  - '-c'
  - | 
      # apply terraform changes for dev or prod environments only
      if [ "$BRANCH_NAME" = "dev" ] || [ "$BRANCH_NAME" = "prod" ]; then
        cd environments/$BRANCH_NAME      
        echo ""
        echo "*************** TERRAFORM APPLY ******************"
        echo "******* At environment: $BRANCH_NAME ********"
        echo "*************************************************"
        terraform apply -auto-approve -var="project=$PROJECT_ID"
      else
        echo "***************************** SKIPPING APPLYING *******************************"
        echo "Branch '$BRANCH_NAME' does not represent an official environment."
        echo "*******************************************************************************"
      fi
  timeout: 300s # 5 minutes

# set substitution variables
substitutions:
  _IMAGE_NAME: "cloud-run-pubsub-service"

# image is pushed to Container Registry
images:
- 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}'